package edu.rice.comp416.scorer;

import edu.rice.comp416.scorer.util.SAMReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class Main {
    public static void main(String[] args) {
        if (args.length == 0) {
            reportError(
                    "No parameters given.\n\tTry '-h' for information on command-line syntax.\n");
            printHelpMessage();
            System.exit(1);
        }

        // Parse all flags.
        Set<Character> flags = new HashSet<>();

        for (String arg : args) {
            if (arg.length() == 2 && arg.startsWith("-")) {
                flags.add(arg.charAt(1));
            }
        }

        if (flags.contains('h')) {
            printHelpMessage();
            System.exit(0);
        }

        String mapFile = "";
        String refFile = "";

        for (String arg : args) {
            if (arg.endsWith(".sam")) {
                if (mapFile.isBlank()) {
                    mapFile = arg;
                } else if (refFile.isBlank()) {
                    refFile = arg;
                } else {
                    reportError(
                            "Can only supply one mapping SAM file and one reference SAM file.\n"
                                    + "\tTry '-h' for information on command-line syntax.\n");
                    printHelpMessage();
                    System.exit(1);
                }
            } else {
                reportError(
                        "Can only supply SAM files.\n"
                                + "\tTry '-h' for information on command-line syntax.\n");
                printHelpMessage();
                System.exit(1);
            }
        }

        if (mapFile.isBlank()) {
            reportError(
                    "A map SAM file must be supplied.\n"
                            + "\tTry '-h' for information on command-line syntax.\n");
            printHelpMessage();
            System.exit(1);
        }

        if (refFile.isBlank()) {
            reportError(
                    "A reference SAM file must be supplied.\n"
                            + "\tTry '-h' for information on command-line syntax.\n");
            printHelpMessage();
            System.exit(1);
        }

        SAMReader mappingSAM = null;
        SAMReader referenceSAM = null;
        try {
            mappingSAM = new SAMReader(mapFile);
            referenceSAM = new SAMReader(refFile);
        } catch (FileNotFoundException e) {
            reportError(e.getMessage());
            System.exit(1);
        } catch (IOException e) {
            reportError(
                    "Failed to process input files when initializing sam reader. See the stack"
                            + " tree for more information.\n");
            e.printStackTrace();
            System.exit(1);
        }

        Map<String, Integer> mapPos = mappingSAM.getReadPos();
        Map<String, Integer> refPos = referenceSAM.getReadPos();

        int falsePositive = 0;
        int falseNegative = 0;
        int truePositive = 0;

        for (Map.Entry<String, Integer> entry : mapPos.entrySet()) {
            if (refPos.containsKey(entry.getKey())) {
                if (Math.abs(refPos.get(entry.getKey()) - entry.getValue()) <= 10) {
                    truePositive += 1;
                } else {
                    falsePositive += 1;
                }
            } else {
                falsePositive += 1;
            }
        }

        for (Map.Entry<String, Integer> entry : refPos.entrySet()) {
            if (!mapPos.containsKey(entry.getKey())) {
                falseNegative += 1;
            }
        }

        double recall = truePositive * 1.0 / (truePositive + falseNegative);
        double precision = truePositive * 1.0 / (truePositive + falsePositive);

        System.out.println("Recall: " + recall);
        System.out.println("Precision: " + precision);
    }

    public static void reportMessage(String message) {
        System.out.println(message);
    }

    public static void reportError(String message) {
        System.err.println(message);
    }

    /** Prints help message to console. */
    private static void printHelpMessage() {
        String helpMessage =
                "Genome-Scale Map Scorer (Katherine Dyson, Elizabeth Sims, Berk Alp Yakici)\n"
                    + "Command syntax:\n"
                    + "\tscore [OPTIONS] MAP TRUTH\n"
                    + "\n"
                    + "Required arguments:\n"
                    + "\tMAP is the pathname (absolute or relative) to the sam file generated by"
                    + " the mapper\n"
                    + "\tTRUTH is the pathname (absolute or relative) to the sam ground truth"
                    + " file\n"
                    + "\n"
                    + "Optional flags:\n"
                    + "\t-h\t  prints this message\n"
                    + "\n"
                    + "Example use:\n"
                    + "\tscore map.sam truth.txt";
        System.out.println(helpMessage);
    }
}
